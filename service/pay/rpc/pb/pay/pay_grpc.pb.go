// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: pay.proto

package pay

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PayService_AddPay_FullMethodName     = "/pay.PayService/AddPay"
	PayService_GetPayById_FullMethodName = "/pay.PayService/GetPayById"
	PayService_Callback_FullMethodName   = "/pay.PayService/Callback"
)

// PayServiceClient is the client API for PayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PayServiceClient interface {
	// -----------------------pay-----------------------
	AddPay(ctx context.Context, in *AddPayReq, opts ...grpc.CallOption) (*AddPayResp, error)
	GetPayById(ctx context.Context, in *DetailReq, opts ...grpc.CallOption) (*DetailResp, error)
	Callback(ctx context.Context, in *CallbackReq, opts ...grpc.CallOption) (*CallbackResp, error)
}

type payServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPayServiceClient(cc grpc.ClientConnInterface) PayServiceClient {
	return &payServiceClient{cc}
}

func (c *payServiceClient) AddPay(ctx context.Context, in *AddPayReq, opts ...grpc.CallOption) (*AddPayResp, error) {
	out := new(AddPayResp)
	err := c.cc.Invoke(ctx, PayService_AddPay_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payServiceClient) GetPayById(ctx context.Context, in *DetailReq, opts ...grpc.CallOption) (*DetailResp, error) {
	out := new(DetailResp)
	err := c.cc.Invoke(ctx, PayService_GetPayById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payServiceClient) Callback(ctx context.Context, in *CallbackReq, opts ...grpc.CallOption) (*CallbackResp, error) {
	out := new(CallbackResp)
	err := c.cc.Invoke(ctx, PayService_Callback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PayServiceServer is the server API for PayService service.
// All implementations must embed UnimplementedPayServiceServer
// for forward compatibility
type PayServiceServer interface {
	// -----------------------pay-----------------------
	AddPay(context.Context, *AddPayReq) (*AddPayResp, error)
	GetPayById(context.Context, *DetailReq) (*DetailResp, error)
	Callback(context.Context, *CallbackReq) (*CallbackResp, error)
	mustEmbedUnimplementedPayServiceServer()
}

// UnimplementedPayServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPayServiceServer struct {
}

func (UnimplementedPayServiceServer) AddPay(context.Context, *AddPayReq) (*AddPayResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPay not implemented")
}
func (UnimplementedPayServiceServer) GetPayById(context.Context, *DetailReq) (*DetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPayById not implemented")
}
func (UnimplementedPayServiceServer) Callback(context.Context, *CallbackReq) (*CallbackResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Callback not implemented")
}
func (UnimplementedPayServiceServer) mustEmbedUnimplementedPayServiceServer() {}

// UnsafePayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PayServiceServer will
// result in compilation errors.
type UnsafePayServiceServer interface {
	mustEmbedUnimplementedPayServiceServer()
}

func RegisterPayServiceServer(s grpc.ServiceRegistrar, srv PayServiceServer) {
	s.RegisterService(&PayService_ServiceDesc, srv)
}

func _PayService_AddPay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServiceServer).AddPay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayService_AddPay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServiceServer).AddPay(ctx, req.(*AddPayReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayService_GetPayById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServiceServer).GetPayById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayService_GetPayById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServiceServer).GetPayById(ctx, req.(*DetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayService_Callback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallbackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServiceServer).Callback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayService_Callback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServiceServer).Callback(ctx, req.(*CallbackReq))
	}
	return interceptor(ctx, in, info, handler)
}

// PayService_ServiceDesc is the grpc.ServiceDesc for PayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pay.PayService",
	HandlerType: (*PayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPay",
			Handler:    _PayService_AddPay_Handler,
		},
		{
			MethodName: "GetPayById",
			Handler:    _PayService_GetPayById_Handler,
		},
		{
			MethodName: "Callback",
			Handler:    _PayService_Callback_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pay.proto",
}
