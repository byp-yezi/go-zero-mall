// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: order.proto

package order

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Ordersrv_AddOrder_FullMethodName       = "/order.ordersrv/AddOrder"
	Ordersrv_AddOrderRevert_FullMethodName = "/order.ordersrv/AddOrderRevert"
	Ordersrv_UpdateOrder_FullMethodName    = "/order.ordersrv/UpdateOrder"
	Ordersrv_DelOrder_FullMethodName       = "/order.ordersrv/DelOrder"
	Ordersrv_GetOrderById_FullMethodName   = "/order.ordersrv/GetOrderById"
	Ordersrv_SearchOrder_FullMethodName    = "/order.ordersrv/SearchOrder"
	Ordersrv_ListOrder_FullMethodName      = "/order.ordersrv/ListOrder"
	Ordersrv_PaidOrder_FullMethodName      = "/order.ordersrv/PaidOrder"
)

// OrdersrvClient is the client API for Ordersrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrdersrvClient interface {
	// -----------------------order-----------------------
	AddOrder(ctx context.Context, in *AddOrderReq, opts ...grpc.CallOption) (*AddOrderResp, error)
	AddOrderRevert(ctx context.Context, in *AddOrderReq, opts ...grpc.CallOption) (*AddOrderResp, error)
	UpdateOrder(ctx context.Context, in *UpdateOrderReq, opts ...grpc.CallOption) (*UpdateOrderResp, error)
	DelOrder(ctx context.Context, in *DelOrderReq, opts ...grpc.CallOption) (*DelOrderResp, error)
	GetOrderById(ctx context.Context, in *GetOrderByIdReq, opts ...grpc.CallOption) (*GetOrderByIdResp, error)
	SearchOrder(ctx context.Context, in *SearchOrderReq, opts ...grpc.CallOption) (*SearchOrderResp, error)
	ListOrder(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResp, error)
	PaidOrder(ctx context.Context, in *PaidReq, opts ...grpc.CallOption) (*PaidResp, error)
}

type ordersrvClient struct {
	cc grpc.ClientConnInterface
}

func NewOrdersrvClient(cc grpc.ClientConnInterface) OrdersrvClient {
	return &ordersrvClient{cc}
}

func (c *ordersrvClient) AddOrder(ctx context.Context, in *AddOrderReq, opts ...grpc.CallOption) (*AddOrderResp, error) {
	out := new(AddOrderResp)
	err := c.cc.Invoke(ctx, Ordersrv_AddOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersrvClient) AddOrderRevert(ctx context.Context, in *AddOrderReq, opts ...grpc.CallOption) (*AddOrderResp, error) {
	out := new(AddOrderResp)
	err := c.cc.Invoke(ctx, Ordersrv_AddOrderRevert_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersrvClient) UpdateOrder(ctx context.Context, in *UpdateOrderReq, opts ...grpc.CallOption) (*UpdateOrderResp, error) {
	out := new(UpdateOrderResp)
	err := c.cc.Invoke(ctx, Ordersrv_UpdateOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersrvClient) DelOrder(ctx context.Context, in *DelOrderReq, opts ...grpc.CallOption) (*DelOrderResp, error) {
	out := new(DelOrderResp)
	err := c.cc.Invoke(ctx, Ordersrv_DelOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersrvClient) GetOrderById(ctx context.Context, in *GetOrderByIdReq, opts ...grpc.CallOption) (*GetOrderByIdResp, error) {
	out := new(GetOrderByIdResp)
	err := c.cc.Invoke(ctx, Ordersrv_GetOrderById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersrvClient) SearchOrder(ctx context.Context, in *SearchOrderReq, opts ...grpc.CallOption) (*SearchOrderResp, error) {
	out := new(SearchOrderResp)
	err := c.cc.Invoke(ctx, Ordersrv_SearchOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersrvClient) ListOrder(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResp, error) {
	out := new(ListResp)
	err := c.cc.Invoke(ctx, Ordersrv_ListOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordersrvClient) PaidOrder(ctx context.Context, in *PaidReq, opts ...grpc.CallOption) (*PaidResp, error) {
	out := new(PaidResp)
	err := c.cc.Invoke(ctx, Ordersrv_PaidOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrdersrvServer is the server API for Ordersrv service.
// All implementations must embed UnimplementedOrdersrvServer
// for forward compatibility
type OrdersrvServer interface {
	// -----------------------order-----------------------
	AddOrder(context.Context, *AddOrderReq) (*AddOrderResp, error)
	AddOrderRevert(context.Context, *AddOrderReq) (*AddOrderResp, error)
	UpdateOrder(context.Context, *UpdateOrderReq) (*UpdateOrderResp, error)
	DelOrder(context.Context, *DelOrderReq) (*DelOrderResp, error)
	GetOrderById(context.Context, *GetOrderByIdReq) (*GetOrderByIdResp, error)
	SearchOrder(context.Context, *SearchOrderReq) (*SearchOrderResp, error)
	ListOrder(context.Context, *ListRequest) (*ListResp, error)
	PaidOrder(context.Context, *PaidReq) (*PaidResp, error)
	mustEmbedUnimplementedOrdersrvServer()
}

// UnimplementedOrdersrvServer must be embedded to have forward compatible implementations.
type UnimplementedOrdersrvServer struct {
}

func (UnimplementedOrdersrvServer) AddOrder(context.Context, *AddOrderReq) (*AddOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrder not implemented")
}
func (UnimplementedOrdersrvServer) AddOrderRevert(context.Context, *AddOrderReq) (*AddOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrderRevert not implemented")
}
func (UnimplementedOrdersrvServer) UpdateOrder(context.Context, *UpdateOrderReq) (*UpdateOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrder not implemented")
}
func (UnimplementedOrdersrvServer) DelOrder(context.Context, *DelOrderReq) (*DelOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelOrder not implemented")
}
func (UnimplementedOrdersrvServer) GetOrderById(context.Context, *GetOrderByIdReq) (*GetOrderByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderById not implemented")
}
func (UnimplementedOrdersrvServer) SearchOrder(context.Context, *SearchOrderReq) (*SearchOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchOrder not implemented")
}
func (UnimplementedOrdersrvServer) ListOrder(context.Context, *ListRequest) (*ListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrder not implemented")
}
func (UnimplementedOrdersrvServer) PaidOrder(context.Context, *PaidReq) (*PaidResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaidOrder not implemented")
}
func (UnimplementedOrdersrvServer) mustEmbedUnimplementedOrdersrvServer() {}

// UnsafeOrdersrvServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrdersrvServer will
// result in compilation errors.
type UnsafeOrdersrvServer interface {
	mustEmbedUnimplementedOrdersrvServer()
}

func RegisterOrdersrvServer(s grpc.ServiceRegistrar, srv OrdersrvServer) {
	s.RegisterService(&Ordersrv_ServiceDesc, srv)
}

func _Ordersrv_AddOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersrvServer).AddOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ordersrv_AddOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersrvServer).AddOrder(ctx, req.(*AddOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ordersrv_AddOrderRevert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersrvServer).AddOrderRevert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ordersrv_AddOrderRevert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersrvServer).AddOrderRevert(ctx, req.(*AddOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ordersrv_UpdateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersrvServer).UpdateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ordersrv_UpdateOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersrvServer).UpdateOrder(ctx, req.(*UpdateOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ordersrv_DelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersrvServer).DelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ordersrv_DelOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersrvServer).DelOrder(ctx, req.(*DelOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ordersrv_GetOrderById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersrvServer).GetOrderById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ordersrv_GetOrderById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersrvServer).GetOrderById(ctx, req.(*GetOrderByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ordersrv_SearchOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersrvServer).SearchOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ordersrv_SearchOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersrvServer).SearchOrder(ctx, req.(*SearchOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ordersrv_ListOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersrvServer).ListOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ordersrv_ListOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersrvServer).ListOrder(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ordersrv_PaidOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdersrvServer).PaidOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ordersrv_PaidOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdersrvServer).PaidOrder(ctx, req.(*PaidReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Ordersrv_ServiceDesc is the grpc.ServiceDesc for Ordersrv service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ordersrv_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order.ordersrv",
	HandlerType: (*OrdersrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddOrder",
			Handler:    _Ordersrv_AddOrder_Handler,
		},
		{
			MethodName: "AddOrderRevert",
			Handler:    _Ordersrv_AddOrderRevert_Handler,
		},
		{
			MethodName: "UpdateOrder",
			Handler:    _Ordersrv_UpdateOrder_Handler,
		},
		{
			MethodName: "DelOrder",
			Handler:    _Ordersrv_DelOrder_Handler,
		},
		{
			MethodName: "GetOrderById",
			Handler:    _Ordersrv_GetOrderById_Handler,
		},
		{
			MethodName: "SearchOrder",
			Handler:    _Ordersrv_SearchOrder_Handler,
		},
		{
			MethodName: "ListOrder",
			Handler:    _Ordersrv_ListOrder_Handler,
		},
		{
			MethodName: "PaidOrder",
			Handler:    _Ordersrv_PaidOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order.proto",
}
