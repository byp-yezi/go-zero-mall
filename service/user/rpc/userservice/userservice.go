// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package userservice

import (
	"context"

	"go-zero-mall/service/user/rpc/user"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	LoginRequest      = user.LoginRequest
	LoginResponse     = user.LoginResponse
	RegisterRequest   = user.RegisterRequest
	RegisterResponse  = user.RegisterResponse
	UpdateInfoRequest = user.UpdateInfoRequest
	UserInfoRequest   = user.UserInfoRequest
	UserInfoResponse  = user.UserInfoResponse

	UserService interface {
		Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
		Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
		UserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error)
		UpdateUserinfo(ctx context.Context, in *UpdateInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error)
	}

	defaultUserService struct {
		cli zrpc.Client
	}
)

func NewUserService(cli zrpc.Client) UserService {
	return &defaultUserService{
		cli: cli,
	}
}

func (m *defaultUserService) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUserService) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

func (m *defaultUserService) UserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.UserInfo(ctx, in, opts...)
}

func (m *defaultUserService) UpdateUserinfo(ctx context.Context, in *UpdateInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.UpdateUserinfo(ctx, in, opts...)
}
